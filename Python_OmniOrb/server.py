#!/usr/bin/env python
# 
# This demo is based heavily on the "hello world" example code supplied
#     with the Fnorb Python ORB.
#
# This version was edited by Gary Allen October 2019 to make it
#     compatible with the omniorb Python/C++ Orb and interoperable
#     with the latest Java Jacorb demos
#
#

# Standard/built-in modules.
import sys

# Omniorb modules.
from omniORB import CORBA, PortableServer

# Stubs and skeletons generated by 'omniidl'.
import HelloWorld, HelloWorld__POA


class HelloWorldServer(HelloWorld__POA.Hello):

    def hello_world(self):
        return '\nHello World from a python server\n'

#############################################################################

def main(argv):

    print 'Starting the Server...'

    # Initialise the ORB.
    orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)

    # Initialise the POA.
    poa = orb.resolve_initial_references("RootPOA")

    # Create an instance of the server and get its reference
    # this will also implicitly activate the object in the POA
    ei = HelloWorldServer()
    eo = ei._this()

    # Initialise and activate the POA MAnager
    poaManager = poa._get_the_POAManager()
    poaManager.activate()

    # Write the stringified object reference to a file (this is just a 'cheap
    # and cheerful' way of making the object reference available to the
    # client!).
    f = open('server.ref', 'w')
    f.write(orb.object_to_string(eo))
    f.flush()

    print 'Server created and accepting requests...'

    # Start the event loop.
    orb.run()

#############################################################################

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        print
        print "Server done"
#############################################################################


